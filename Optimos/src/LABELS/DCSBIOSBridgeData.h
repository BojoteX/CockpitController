// Auto-generated DCSBIOS Bridge Data (JSONâ€‘only)
#pragma once

#include <stdint.h>
#include <vector>
#include <unordered_map>

struct DcsOutputEntry { uint16_t addr, mask; uint8_t shift; uint16_t max_value; const char* label; };
static const DcsOutputEntry DcsOutputTable[] = {
    {0x740C,0x0004,2,1,"FIRE_APU_LT"},
    {0x74A4,0x0100,8,1,"CLIP_APU_ACC_LT"},
    {0x74A4,0x0200,9,1,"CLIP_BATT_SW_LT"},
    {0x74A0,0x8000,15,1,"CLIP_CK_SEAT_LT"},
    {0x74A4,0x4000,14,1,"CLIP_FCES_LT"},
    {0x74A4,0x0400,10,1,"CLIP_FCS_HOT_LT"},
    {0x74A4,0x2000,13,1,"CLIP_FUEL_LO_LT"},
    {0x74A4,0x0800,11,1,"CLIP_GEN_TIE_LT"},
    {0x74A8,0x0100,8,1,"CLIP_L_GEN_LT"},
    {0x74A8,0x0200,9,1,"CLIP_R_GEN_LT"},
    {0x74A4,0x1000,12,1,"CAGADA"},
    {0x74A4,0x1000,12,1,"CLIP_SPARE_CTN1_LT"},
    {0x74A4,0x8000,15,1,"CLIP_SPARE_CTN2_LT"},
    {0x74A8,0x0400,10,1,"CLIP_SPARE_CTN3_LT"},
    {0x74D4,0x8000,15,1,"CMSD_JET_SEL_L"},
    {0x740A,0x0008,3,1,"LH_ADV_ASPJ_OH"},
    {0x740A,0x0010,4,1,"LH_ADV_GO"},
    {0x740A,0x0002,1,1,"LH_ADV_L_BAR_GREEN"},
    {0x7408,0x8000,15,1,"LH_ADV_L_BAR_RED"},
    {0x7408,0x0800,11,1,"LH_ADV_L_BLEED"},
    {0x740A,0x0020,5,1,"LH_ADV_NO_GO"},
    {0x74A4,0x0400,10,1,"CLIP_FCS_HOT_LT"},
    {0x74A4,0x2000,13,1,"CLIP_FUEL_LO_LT"},
    {0x74A4,0x0800,11,1,"CLIP_GEN_TIE_LT"},
    {0x74A8,0x0100,8,1,"CLIP_L_GEN_LT"},
    {0x74A8,0x0200,9,1,"CLIP_R_GEN_LT"},
    {0x74A4,0x1000,12,1,"CAGADA"},
    {0x74A4,0x1000,12,1,"CLIP_SPARE_CTN1_LT"},
    {0x74A4,0x8000,15,1,"CLIP_SPARE_CTN2_LT"},
    {0x74A8,0x0400,10,1,"CLIP_SPARE_CTN3_LT"},
    {0x74D4,0x8000,15,1,"CMSD_JET_SEL_L"},
    {0x740A,0x0008,3,1,"LH_ADV_ASPJ_OH"},
    {0x740A,0x0010,4,1,"LH_ADV_GO"},
    {0x740A,0x0002,1,1,"LH_ADV_L_BAR_GREEN"},
    {0x7408,0x8000,15,1,"LH_ADV_L_BAR_RED"},
    {0x7408,0x0800,11,1,"LH_ADV_L_BLEED"},
    {0x740A,0x0020,5,1,"LH_ADV_NO_GO"},
    {0x740A,0x0001,0,1,"LH_ADV_REC"},
    {0x7408,0x1000,12,1,"LH_ADV_R_BLEED"},
    {0x7408,0x2000,13,1,"LH_ADV_SPD_BRK"},
    {0x7408,0x4000,14,1,"LH_ADV_STBY"},
    {0x740A,0x0004,2,1,"LH_ADV_XMIT"},
    {0x7408,0x0040,6,1,"FIRE_LEFT_LT"},
    {0x7408,0x0001,0,1,"LS_LOCK"},
    {0x7408,0x0002,1,1,"LS_SHOOT"},
    {0x7408,0x0004,2,1,"LS_SHOOT_STROBE"},
    {0x7456,0xFFFF,0,65535,"HMD_OFF_BRT"},
    {0x742A,0x0800,11,1,"SPIN_LT"},
    {0x740C,0x0200,9,1,"MASTER_MODE_AA_LT"},
    {0x740C,0x0400,10,1,"MASTER_MODE_AG_LT"},
    {0x740C,0x4000,14,1,"MC_DISCH"},
    {0x740C,0x8000,15,1,"MC_READY"},
    {0x7408,0x0200,9,1,"MASTER_CAUTION_LT"},
    {0x740A,0x0800,11,1,"RH_ADV_AAA"},
    {0x740A,0x0400,10,1,"RH_ADV_AI"},
    {0x740A,0x1000,12,1,"RH_ADV_CW"},
    {0x740A,0x0100,8,1,"RH_ADV_DISP"},
    {0x740A,0x0080,7,1,"RH_ADV_RCDR_ON"},
    {0x740A,0x0200,9,1,"RH_ADV_SAM"},
    {0x740A,0x2000,13,1,"RH_ADV_SPARE_RH1"},
    {0x740A,0x4000,14,1,"RH_ADV_SPARE_RH2"},
    {0x740A,0x8000,15,1,"RH_ADV_SPARE_RH3"},
    {0x740C,0x0001,0,1,"RH_ADV_SPARE_RH4"},
    {0x740C,0x0002,1,1,"RH_ADV_SPARE_RH5"},
    {0x740C,0x0010,4,1,"FIRE_RIGHT_LT"},
};
static const size_t DcsOutputTableSize = sizeof(DcsOutputTable)/sizeof(DcsOutputTable[0]);

static const std::unordered_map<uint16_t,std::vector<const DcsOutputEntry*>> addressToEntries = {
    {0x740C,{&DcsOutputTable[0],&DcsOutputTable[36],&DcsOutputTable[37],&DcsOutputTable[38],&DcsOutputTable[39],&DcsOutputTable[50],&DcsOutputTable[51],&DcsOutputTable[52]}},
    {0x74A4,{&DcsOutputTable[1],&DcsOutputTable[2],&DcsOutputTable[4],&DcsOutputTable[5],&DcsOutputTable[6],&DcsOutputTable[7],&DcsOutputTable[10],&DcsOutputTable[11]}},
    {0x74A0,{&DcsOutputTable[3]}},
    {0x74A8,{&DcsOutputTable[8],&DcsOutputTable[9],&DcsOutputTable[12]}},
    {0x74D4,{&DcsOutputTable[13]}},
    {0x754A,{&DcsOutputTable[14]}},
    {0x7544,{&DcsOutputTable[15]}},
    {0x7548,{&DcsOutputTable[16]}},
    {0x7546,{&DcsOutputTable[17]}},
    {0x754C,{&DcsOutputTable[18]}},
    {0x740A,{&DcsOutputTable[19],&DcsOutputTable[20],&DcsOutputTable[21],&DcsOutputTable[24],&DcsOutputTable[25],&DcsOutputTable[29],&DcsOutputTable[41],&DcsOutputTable[42],&DcsOutputTable[43],&DcsOutputTable[44],&DcsOutputTable[45],&DcsOutputTable[46],&DcsOutputTable[47],&DcsOutputTable[48],&DcsOutputTable[49]}},
    {0x7408,{&DcsOutputTable[22],&DcsOutputTable[23],&DcsOutputTable[26],&DcsOutputTable[27],&DcsOutputTable[28],&DcsOutputTable[30],&DcsOutputTable[31],&DcsOutputTable[32],&DcsOutputTable[33],&DcsOutputTable[40]}},
    {0x7456,{&DcsOutputTable[34]}},
    {0x742A,{&DcsOutputTable[35]}},
};

struct DcsInputEntry { const char* label; uint16_t max_value; const char* description; };
static const DcsInputEntry DcsInputTable[] = {
    {"APU_FIRE_BTN",1,"APU Fire Warning/Extinguisher Light" },
    {"AUX_REL_SW",1,"Auxiliary Release Switch" },
    {"CMSD_DISPENSE_SW",2,"DISPENSER Switch" },
    {"CMSD_JET_SEL_BTN",1,"ECM JETT JETT SEL Button - Push to jettison" },
    {"ECM_MODE_SW",4,"ECM Mode Switch" },
    {"FIRE_EXT_BTN",1,"Fire Extinguisher Pushbutton" },
    {"IFEI_DWN_BTN",1,"Down Arrow Button" },
    {"IFEI_ET_BTN",1,"ET Button" },
    {"IFEI_MODE_BTN",1,"Mode Button" },
    {"IFEI_QTY_BTN",1,"QTY Button" },
    {"IFEI_UP_BTN",1,"Up Arrow Button" },
    {"IFEI_ZONE_BTN",1,"ZONE Button" },
    {"CHART_DIMMER",65535,"CHART Light Dimmer" },
    {"COCKKPIT_LIGHT_MODE_SW",2,"MODE Switch" },
    {"CONSOLES_DIMMER",65535,"CONSOLES Lights Dimmer" },
    {"FLOOD_DIMMER",65535,"FLOOD Light Dimmer" },
    {"INST_PNL_DIMMER",65535,"INST PNL Dimmer" },
    {"LIGHTS_TEST_SW",1,"Lights Test Switch" },
    {"WARN_CAUTION_DIMMER",65535,"WARN/CAUTION Light Dimmer" },
    {"LEFT_FIRE_BTN",1,"Left Engine/AMAD Fire Warning/Extinguisher Light" },
    {"LEFT_FIRE_BTN_COVER",1,"Left Engine/AMAD Fire Warning Cover" },
    {"HMD_OFF_BRT",65535,"HMD OFF/BRT Knob" },
    {"IR_COOL_SW",2,"IR Cooling Switch" },
    {"SPIN_RECOVERY_COVER",1,"Spin Recovery Switch Cover" },
    {"SPIN_RECOVERY_SW",1,"Spin Recovery Switch" },
    {"MASTER_ARM_SW",1,"Master Arm Switch" },
    {"MASTER_MODE_AA",1,"Master Mode Button" },
    {"MASTER_MODE_AG",1,"Master Mode Button" },
    {"MASTER_CAUTION_RESET_SW",1,"MASTER CAUTION Reset Button - Press to reset" },
    {"RIGHT_FIRE_BTN",1,"Right Engine/AMAD Fire Warning/Extinguisher Light" },
    {"RIGHT_FIRE_BTN_COVER",1,"Right Engine/AMAD Fire Warning Cover" },
};
static const size_t DcsInputTableSize = sizeof(DcsInputTable)/sizeof(DcsInputTable[0]);

struct SelectorEntry { const char* label; const char* dcsCommand; uint16_t value; const char* controlType; uint16_t group; };
static const SelectorEntry SelectorMap[] = {
    { "APU_FIRE_BTN","APU_FIRE_BTN",1,"momentary",0 },
    { "AUX_REL_SW_ENABLE","AUX_REL_SW",1,"selector",1 },
    { "AUX_REL_SW_NORM","AUX_REL_SW",0,"selector",1 },
    { "CMSD_DISPENSE_SW_BYPASS","CMSD_DISPENSE_SW",2,"selector",2 },
    { "CMSD_DISPENSE_SW_ON","CMSD_DISPENSE_SW",1,"selector",2 },
    { "CMSD_DISPENSE_SW_OFF","CMSD_DISPENSE_SW",0,"selector",2 },
    { "CMSD_JET_SEL_BTN","CMSD_JET_SEL_BTN",1,"momentary",0 },
    { "ECM_MODE_SW_XMIT","ECM_MODE_SW",4,"selector",3 },
    { "ECM_MODE_SW_REC","ECM_MODE_SW",3,"selector",3 },
    { "ECM_MODE_SW_BIT","ECM_MODE_SW",2,"selector",3 },
    { "ECM_MODE_SW_STBY","ECM_MODE_SW",1,"selector",3 },
    { "ECM_MODE_SW_OFF","ECM_MODE_SW",0,"selector",3 },
    { "FIRE_EXT_BTN","FIRE_EXT_BTN",1,"momentary",0 },
    { "IFEI_DWN_BTN","IFEI_DWN_BTN",1,"momentary",0 },
    { "IFEI_ET_BTN","IFEI_ET_BTN",1,"momentary",0 },
    { "IFEI_MODE_BTN","IFEI_MODE_BTN",1,"momentary",0 },
    { "IFEI_QTY_BTN","IFEI_QTY_BTN",1,"momentary",0 },
    { "IFEI_UP_BTN","IFEI_UP_BTN",1,"momentary",0 },
    { "IFEI_ZONE_BTN","IFEI_ZONE_BTN",1,"momentary",0 },
    { "COCKKPIT_LIGHT_MODE_SW_NVG","COCKKPIT_LIGHT_MODE_SW",2,"selector",4 },
    { "COCKKPIT_LIGHT_MODE_SW_NITE","COCKKPIT_LIGHT_MODE_SW",1,"selector",4 },
    { "COCKKPIT_LIGHT_MODE_SW_DAY","COCKKPIT_LIGHT_MODE_SW",0,"selector",4 },
    { "LIGHTS_TEST_SW_TEST","LIGHTS_TEST_SW",1,"selector",5 },
    { "LIGHTS_TEST_SW_OFF","LIGHTS_TEST_SW",0,"selector",5 },
    { "LEFT_FIRE_BTN","LEFT_FIRE_BTN",1,"momentary",0 },
    { "LEFT_FIRE_BTN_COVER","LEFT_FIRE_BTN_COVER",1,"momentary",0 },
    { "IR_COOL_SW_ORIDE","IR_COOL_SW",2,"selector",6 },
    { "IR_COOL_SW_NORM","IR_COOL_SW",1,"selector",6 },
    { "IR_COOL_SW_OFF","IR_COOL_SW",0,"selector",6 },
    { "SPIN_RECOVERY_COVER","SPIN_RECOVERY_COVER",1,"momentary",0 },
    { "SPIN_RECOVERY_SW_RCVY","SPIN_RECOVERY_SW",1,"selector",7 },
    { "SPIN_RECOVERY_SW_NORM","SPIN_RECOVERY_SW",0,"selector",7 },
    { "MASTER_ARM_SW_ARM","MASTER_ARM_SW",1,"selector",8 },
    { "MASTER_ARM_SW_SAFE","MASTER_ARM_SW",0,"selector",8 },
    { "MASTER_MODE_AA","MASTER_MODE_AA",1,"momentary",0 },
    { "MASTER_MODE_AG","MASTER_MODE_AG",1,"momentary",0 },
    { "MASTER_CAUTION_RESET_SW","MASTER_CAUTION_RESET_SW",1,"momentary",0 },
    { "RIGHT_FIRE_BTN","RIGHT_FIRE_BTN",1,"momentary",0 },
    { "RIGHT_FIRE_BTN_COVER","RIGHT_FIRE_BTN_COVER",1,"momentary",0 },
};
static const size_t SelectorMapSize = sizeof(SelectorMap)/sizeof(SelectorMap[0]);
