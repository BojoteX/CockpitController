// Auto-generated by auto-generate-callback-wrappers.py

#pragma once

#include <Arduino>

// Shared stub declarations
void onLedChange(const char* label, unsigned int value);
void onSelectorChange(const char* label, unsigned int value);

// LED Callback Wrappers
void cb_FIRE_APU_LT(unsigned int value) { onLedChange("FIRE_APU_LT", value); }
void cb_CLIP_APU_ACC_LT(unsigned int value) { onLedChange("CLIP_APU_ACC_LT", value); }
void cb_CLIP_BATT_SW_LT(unsigned int value) { onLedChange("CLIP_BATT_SW_LT", value); }
void cb_CLIP_CK_SEAT_LT(unsigned int value) { onLedChange("CLIP_CK_SEAT_LT", value); }
void cb_CLIP_FCES_LT(unsigned int value) { onLedChange("CLIP_FCES_LT", value); }
void cb_CLIP_FCS_HOT_LT(unsigned int value) { onLedChange("CLIP_FCS_HOT_LT", value); }
void cb_CLIP_FUEL_LO_LT(unsigned int value) { onLedChange("CLIP_FUEL_LO_LT", value); }
void cb_CLIP_GEN_TIE_LT(unsigned int value) { onLedChange("CLIP_GEN_TIE_LT", value); }
void cb_CLIP_L_GEN_LT(unsigned int value) { onLedChange("CLIP_L_GEN_LT", value); }
void cb_CLIP_R_GEN_LT(unsigned int value) { onLedChange("CLIP_R_GEN_LT", value); }
void cb_CLIP_SPARE_CTN1_LT(unsigned int value) { onLedChange("CLIP_SPARE_CTN1_LT", value); }
void cb_CLIP_SPARE_CTN2_LT(unsigned int value) { onLedChange("CLIP_SPARE_CTN2_LT", value); }
void cb_CLIP_SPARE_CTN3_LT(unsigned int value) { onLedChange("CLIP_SPARE_CTN3_LT", value); }
void cb_CMSD_JET_SEL_L(unsigned int value) { onLedChange("CMSD_JET_SEL_L", value); }
void cb_CHART_DIMMER(unsigned int value) { onLedChange("CHART_DIMMER", value); }
void cb_CONSOLES_DIMMER(unsigned int value) { onLedChange("CONSOLES_DIMMER", value); }
void cb_FLOOD_DIMMER(unsigned int value) { onLedChange("FLOOD_DIMMER", value); }
void cb_INST_PNL_DIMMER(unsigned int value) { onLedChange("INST_PNL_DIMMER", value); }
void cb_WARN_CAUTION_DIMMER(unsigned int value) { onLedChange("WARN_CAUTION_DIMMER", value); }
void cb_LH_ADV_ASPJ_OH(unsigned int value) { onLedChange("LH_ADV_ASPJ_OH", value); }
void cb_LH_ADV_GO(unsigned int value) { onLedChange("LH_ADV_GO", value); }
void cb_LH_ADV_L_BAR_GREEN(unsigned int value) { onLedChange("LH_ADV_L_BAR_GREEN", value); }
void cb_LH_ADV_L_BAR_RED(unsigned int value) { onLedChange("LH_ADV_L_BAR_RED", value); }
void cb_LH_ADV_L_BLEED(unsigned int value) { onLedChange("LH_ADV_L_BLEED", value); }
void cb_LH_ADV_NO_GO(unsigned int value) { onLedChange("LH_ADV_NO_GO", value); }
void cb_LH_ADV_REC(unsigned int value) { onLedChange("LH_ADV_REC", value); }
void cb_LH_ADV_R_BLEED(unsigned int value) { onLedChange("LH_ADV_R_BLEED", value); }
void cb_LH_ADV_SPD_BRK(unsigned int value) { onLedChange("LH_ADV_SPD_BRK", value); }
void cb_LH_ADV_STBY(unsigned int value) { onLedChange("LH_ADV_STBY", value); }
void cb_LH_ADV_XMIT(unsigned int value) { onLedChange("LH_ADV_XMIT", value); }
void cb_FIRE_LEFT_LT(unsigned int value) { onLedChange("FIRE_LEFT_LT", value); }
void cb_LS_LOCK(unsigned int value) { onLedChange("LS_LOCK", value); }
void cb_LS_SHOOT(unsigned int value) { onLedChange("LS_SHOOT", value); }
void cb_LS_SHOOT_STROBE(unsigned int value) { onLedChange("LS_SHOOT_STROBE", value); }
void cb_HMD_OFF_BRT(unsigned int value) { onLedChange("HMD_OFF_BRT", value); }
void cb_SPIN_LT(unsigned int value) { onLedChange("SPIN_LT", value); }
void cb_MASTER_MODE_AA_LT(unsigned int value) { onLedChange("MASTER_MODE_AA_LT", value); }
void cb_MASTER_MODE_AG_LT(unsigned int value) { onLedChange("MASTER_MODE_AG_LT", value); }
void cb_MC_DISCH(unsigned int value) { onLedChange("MC_DISCH", value); }
void cb_MC_READY(unsigned int value) { onLedChange("MC_READY", value); }
void cb_MASTER_CAUTION_LT(unsigned int value) { onLedChange("MASTER_CAUTION_LT", value); }
void cb_RH_ADV_AAA(unsigned int value) { onLedChange("RH_ADV_AAA", value); }
void cb_RH_ADV_AI(unsigned int value) { onLedChange("RH_ADV_AI", value); }
void cb_RH_ADV_CW(unsigned int value) { onLedChange("RH_ADV_CW", value); }
void cb_RH_ADV_DISP(unsigned int value) { onLedChange("RH_ADV_DISP", value); }
void cb_RH_ADV_RCDR_ON(unsigned int value) { onLedChange("RH_ADV_RCDR_ON", value); }
void cb_RH_ADV_SAM(unsigned int value) { onLedChange("RH_ADV_SAM", value); }
void cb_RH_ADV_SPARE_RH1(unsigned int value) { onLedChange("RH_ADV_SPARE_RH1", value); }
void cb_RH_ADV_SPARE_RH2(unsigned int value) { onLedChange("RH_ADV_SPARE_RH2", value); }
void cb_RH_ADV_SPARE_RH3(unsigned int value) { onLedChange("RH_ADV_SPARE_RH3", value); }
void cb_RH_ADV_SPARE_RH4(unsigned int value) { onLedChange("RH_ADV_SPARE_RH4", value); }
void cb_RH_ADV_SPARE_RH5(unsigned int value) { onLedChange("RH_ADV_SPARE_RH5", value); }
void cb_FIRE_RIGHT_LT(unsigned int value) { onLedChange("FIRE_RIGHT_LT", value); }

// Selector Callback Wrappers
void cb_APU_FIRE_BTN(unsigned int value) { onSelectorChange("APU_FIRE_BTN", value); }
void cb_AUX_REL_SW(unsigned int value) { onSelectorChange("AUX_REL_SW", value); }
void cb_CMSD_DISPENSE_SW(unsigned int value) { onSelectorChange("CMSD_DISPENSE_SW", value); }
void cb_CMSD_JET_SEL_BTN(unsigned int value) { onSelectorChange("CMSD_JET_SEL_BTN", value); }
void cb_ECM_MODE_SW(unsigned int value) { onSelectorChange("ECM_MODE_SW", value); }
void cb_FIRE_EXT_BTN(unsigned int value) { onSelectorChange("FIRE_EXT_BTN", value); }
void cb_COCKKPIT_LIGHT_MODE_SW(unsigned int value) { onSelectorChange("COCKKPIT_LIGHT_MODE_SW", value); }
void cb_LIGHTS_TEST_SW(unsigned int value) { onSelectorChange("LIGHTS_TEST_SW", value); }
void cb_LEFT_FIRE_BTN(unsigned int value) { onSelectorChange("LEFT_FIRE_BTN", value); }
void cb_LEFT_FIRE_BTN_COVER(unsigned int value) { onSelectorChange("LEFT_FIRE_BTN_COVER", value); }
void cb_IR_COOL_SW(unsigned int value) { onSelectorChange("IR_COOL_SW", value); }
void cb_SPIN_RECOVERY_COVER(unsigned int value) { onSelectorChange("SPIN_RECOVERY_COVER", value); }
void cb_SPIN_RECOVERY_SW(unsigned int value) { onSelectorChange("SPIN_RECOVERY_SW", value); }
void cb_MASTER_ARM_SW(unsigned int value) { onSelectorChange("MASTER_ARM_SW", value); }
void cb_MASTER_MODE_AA(unsigned int value) { onSelectorChange("MASTER_MODE_AA", value); }
void cb_MASTER_MODE_AG(unsigned int value) { onSelectorChange("MASTER_MODE_AG", value); }
void cb_MASTER_CAUTION_RESET_SW(unsigned int value) { onSelectorChange("MASTER_CAUTION_RESET_SW", value); }
void cb_RIGHT_FIRE_BTN(unsigned int value) { onSelectorChange("RIGHT_FIRE_BTN", value); }
void cb_RIGHT_FIRE_BTN_COVER(unsigned int value) { onSelectorChange("RIGHT_FIRE_BTN_COVER", value); }

// LED Buffers
    DcsBios::IntegerBuffer buf_FIRE_APU_LT(0x740C, 0x0004, 2, cb_FIRE_APU_LT);
    DcsBios::IntegerBuffer buf_CLIP_APU_ACC_LT(0x74A4, 0x0100, 8, cb_CLIP_APU_ACC_LT);
    DcsBios::IntegerBuffer buf_CLIP_BATT_SW_LT(0x74A4, 0x0200, 9, cb_CLIP_BATT_SW_LT);
    DcsBios::IntegerBuffer buf_CLIP_CK_SEAT_LT(0x74A0, 0x8000, 15, cb_CLIP_CK_SEAT_LT);
    DcsBios::IntegerBuffer buf_CLIP_FCES_LT(0x74A4, 0x4000, 14, cb_CLIP_FCES_LT);
    DcsBios::IntegerBuffer buf_CLIP_FCS_HOT_LT(0x74A4, 0x0400, 10, cb_CLIP_FCS_HOT_LT);
    DcsBios::IntegerBuffer buf_CLIP_FUEL_LO_LT(0x74A4, 0x2000, 13, cb_CLIP_FUEL_LO_LT);
    DcsBios::IntegerBuffer buf_CLIP_GEN_TIE_LT(0x74A4, 0x0800, 11, cb_CLIP_GEN_TIE_LT);
    DcsBios::IntegerBuffer buf_CLIP_L_GEN_LT(0x74A8, 0x0100, 8, cb_CLIP_L_GEN_LT);
    DcsBios::IntegerBuffer buf_CLIP_R_GEN_LT(0x74A8, 0x0200, 9, cb_CLIP_R_GEN_LT);
    DcsBios::IntegerBuffer buf_CLIP_SPARE_CTN1_LT(0x74A4, 0x1000, 12, cb_CLIP_SPARE_CTN1_LT);
    DcsBios::IntegerBuffer buf_CLIP_SPARE_CTN2_LT(0x74A4, 0x8000, 15, cb_CLIP_SPARE_CTN2_LT);
    DcsBios::IntegerBuffer buf_CLIP_SPARE_CTN3_LT(0x74A8, 0x0400, 10, cb_CLIP_SPARE_CTN3_LT);
    DcsBios::IntegerBuffer buf_CMSD_JET_SEL_L(0x74D4, 0x8000, 15, cb_CMSD_JET_SEL_L);
    DcsBios::IntegerBuffer buf_CHART_DIMMER(0x754A, 0xFFFF, 0, cb_CHART_DIMMER);
    DcsBios::IntegerBuffer buf_CONSOLES_DIMMER(0x7544, 0xFFFF, 0, cb_CONSOLES_DIMMER);
    DcsBios::IntegerBuffer buf_FLOOD_DIMMER(0x7548, 0xFFFF, 0, cb_FLOOD_DIMMER);
    DcsBios::IntegerBuffer buf_INST_PNL_DIMMER(0x7546, 0xFFFF, 0, cb_INST_PNL_DIMMER);
    DcsBios::IntegerBuffer buf_WARN_CAUTION_DIMMER(0x754C, 0xFFFF, 0, cb_WARN_CAUTION_DIMMER);
    DcsBios::IntegerBuffer buf_LH_ADV_ASPJ_OH(0x740A, 0x0008, 3, cb_LH_ADV_ASPJ_OH);
    DcsBios::IntegerBuffer buf_LH_ADV_GO(0x740A, 0x0010, 4, cb_LH_ADV_GO);
    DcsBios::IntegerBuffer buf_LH_ADV_L_BAR_GREEN(0x740A, 0x0002, 1, cb_LH_ADV_L_BAR_GREEN);
    DcsBios::IntegerBuffer buf_LH_ADV_L_BAR_RED(0x7408, 0x8000, 15, cb_LH_ADV_L_BAR_RED);
    DcsBios::IntegerBuffer buf_LH_ADV_L_BLEED(0x7408, 0x0800, 11, cb_LH_ADV_L_BLEED);
    DcsBios::IntegerBuffer buf_LH_ADV_NO_GO(0x740A, 0x0020, 5, cb_LH_ADV_NO_GO);
    DcsBios::IntegerBuffer buf_LH_ADV_REC(0x740A, 0x0001, 0, cb_LH_ADV_REC);
    DcsBios::IntegerBuffer buf_LH_ADV_R_BLEED(0x7408, 0x1000, 12, cb_LH_ADV_R_BLEED);
    DcsBios::IntegerBuffer buf_LH_ADV_SPD_BRK(0x7408, 0x2000, 13, cb_LH_ADV_SPD_BRK);
    DcsBios::IntegerBuffer buf_LH_ADV_STBY(0x7408, 0x4000, 14, cb_LH_ADV_STBY);
    DcsBios::IntegerBuffer buf_LH_ADV_XMIT(0x740A, 0x0004, 2, cb_LH_ADV_XMIT);
    DcsBios::IntegerBuffer buf_FIRE_LEFT_LT(0x7408, 0x0040, 6, cb_FIRE_LEFT_LT);
    DcsBios::IntegerBuffer buf_LS_LOCK(0x7408, 0x0001, 0, cb_LS_LOCK);
    DcsBios::IntegerBuffer buf_LS_SHOOT(0x7408, 0x0002, 1, cb_LS_SHOOT);
    DcsBios::IntegerBuffer buf_LS_SHOOT_STROBE(0x7408, 0x0004, 2, cb_LS_SHOOT_STROBE);
    DcsBios::IntegerBuffer buf_HMD_OFF_BRT(0x7456, 0xFFFF, 0, cb_HMD_OFF_BRT);
    DcsBios::IntegerBuffer buf_SPIN_LT(0x742A, 0x0800, 11, cb_SPIN_LT);
    DcsBios::IntegerBuffer buf_MASTER_MODE_AA_LT(0x740C, 0x0200, 9, cb_MASTER_MODE_AA_LT);
    DcsBios::IntegerBuffer buf_MASTER_MODE_AG_LT(0x740C, 0x0400, 10, cb_MASTER_MODE_AG_LT);
    DcsBios::IntegerBuffer buf_MC_DISCH(0x740C, 0x4000, 14, cb_MC_DISCH);
    DcsBios::IntegerBuffer buf_MC_READY(0x740C, 0x8000, 15, cb_MC_READY);
    DcsBios::IntegerBuffer buf_MASTER_CAUTION_LT(0x7408, 0x0200, 9, cb_MASTER_CAUTION_LT);
    DcsBios::IntegerBuffer buf_RH_ADV_AAA(0x740A, 0x0800, 11, cb_RH_ADV_AAA);
    DcsBios::IntegerBuffer buf_RH_ADV_AI(0x740A, 0x0400, 10, cb_RH_ADV_AI);
    DcsBios::IntegerBuffer buf_RH_ADV_CW(0x740A, 0x1000, 12, cb_RH_ADV_CW);
    DcsBios::IntegerBuffer buf_RH_ADV_DISP(0x740A, 0x0100, 8, cb_RH_ADV_DISP);
    DcsBios::IntegerBuffer buf_RH_ADV_RCDR_ON(0x740A, 0x0080, 7, cb_RH_ADV_RCDR_ON);
    DcsBios::IntegerBuffer buf_RH_ADV_SAM(0x740A, 0x0200, 9, cb_RH_ADV_SAM);
    DcsBios::IntegerBuffer buf_RH_ADV_SPARE_RH1(0x740A, 0x2000, 13, cb_RH_ADV_SPARE_RH1);
    DcsBios::IntegerBuffer buf_RH_ADV_SPARE_RH2(0x740A, 0x4000, 14, cb_RH_ADV_SPARE_RH2);
    DcsBios::IntegerBuffer buf_RH_ADV_SPARE_RH3(0x740A, 0x8000, 15, cb_RH_ADV_SPARE_RH3);
    DcsBios::IntegerBuffer buf_RH_ADV_SPARE_RH4(0x740C, 0x0001, 0, cb_RH_ADV_SPARE_RH4);
    DcsBios::IntegerBuffer buf_RH_ADV_SPARE_RH5(0x740C, 0x0002, 1, cb_RH_ADV_SPARE_RH5);
    DcsBios::IntegerBuffer buf_FIRE_RIGHT_LT(0x740C, 0x0010, 4, cb_FIRE_RIGHT_LT);

// Selector Buffers
    DcsBios::IntegerBuffer sel_APU_FIRE_BTN(0x740C, 0x0008, 3, cb_APU_FIRE_BTN);
    DcsBios::IntegerBuffer sel_AUX_REL_SW(0x7488, 0x0800, 11, cb_AUX_REL_SW);
    DcsBios::IntegerBuffer sel_CMSD_DISPENSE_SW(0x7484, 0x6000, 13, cb_CMSD_DISPENSE_SW);
    DcsBios::IntegerBuffer sel_CMSD_JET_SEL_BTN(0x7484, 0x8000, 15, cb_CMSD_JET_SEL_BTN);
    DcsBios::IntegerBuffer sel_ECM_MODE_SW(0x7488, 0x0700, 8, cb_ECM_MODE_SW);
    DcsBios::IntegerBuffer sel_FIRE_EXT_BTN(0x740E, 0x0001, 0, cb_FIRE_EXT_BTN);
    DcsBios::IntegerBuffer sel_COCKKPIT_LIGHT_MODE_SW(0x74C8, 0x0600, 9, cb_COCKKPIT_LIGHT_MODE_SW);
    DcsBios::IntegerBuffer sel_LIGHTS_TEST_SW(0x74C8, 0x0800, 11, cb_LIGHTS_TEST_SW);
    DcsBios::IntegerBuffer sel_LEFT_FIRE_BTN(0x7408, 0x0080, 7, cb_LEFT_FIRE_BTN);
    DcsBios::IntegerBuffer sel_LEFT_FIRE_BTN_COVER(0x7408, 0x0100, 8, cb_LEFT_FIRE_BTN_COVER);
    DcsBios::IntegerBuffer sel_IR_COOL_SW(0x742A, 0xC000, 14, cb_IR_COOL_SW);
    DcsBios::IntegerBuffer sel_SPIN_RECOVERY_COVER(0x742A, 0x1000, 12, cb_SPIN_RECOVERY_COVER);
    DcsBios::IntegerBuffer sel_SPIN_RECOVERY_SW(0x742A, 0x2000, 13, cb_SPIN_RECOVERY_SW);
    DcsBios::IntegerBuffer sel_MASTER_ARM_SW(0x740C, 0x2000, 13, cb_MASTER_ARM_SW);
    DcsBios::IntegerBuffer sel_MASTER_MODE_AA(0x740C, 0x0800, 11, cb_MASTER_MODE_AA);
    DcsBios::IntegerBuffer sel_MASTER_MODE_AG(0x740C, 0x1000, 12, cb_MASTER_MODE_AG);
    DcsBios::IntegerBuffer sel_MASTER_CAUTION_RESET_SW(0x7408, 0x0400, 10, cb_MASTER_CAUTION_RESET_SW);
    DcsBios::IntegerBuffer sel_RIGHT_FIRE_BTN(0x740C, 0x0020, 5, cb_RIGHT_FIRE_BTN);
    DcsBios::IntegerBuffer sel_RIGHT_FIRE_BTN_COVER(0x740C, 0x0040, 6, cb_RIGHT_FIRE_BTN_COVER);

struct DcsStringMapping {
    const char* label;
    uint16_t address;
    uint16_t maxLength;
};

const DcsStringMapping stringMap[] = {
};
const size_t stringMapSize = sizeof(stringMap) / sizeof(stringMap[0]);

/* ---- Enhanced Selector Info (from JSON + .lua) ---- */
// APU_FIRE_BTN (APU Fire Warning/Extinguisher Light): 0=APU Fire Warning, 1=Extinguisher Light
// AUX_REL_SW (Auxiliary Release Switch): 0, 1
// CMSD_DISPENSE_SW (DISPENSER Switch): 0=BYPASS, 1=ON, 2=OFF
// CMSD_JET_SEL_BTN (ECM JETT JETT SEL Button - Push to jettison): 0, 1
// ECM_MODE_SW (ECM Mode Switch): 0=XMIT, 1=REC, 2=BIT, 3=STBY, 4=OFF
// FIRE_EXT_BTN (Fire Extinguisher Pushbutton): 0, 1
// COCKKPIT_LIGHT_MODE_SW (MODE Switch): 0, 1
// LIGHTS_TEST_SW (Lights Test Switch): 0, 1
// LEFT_FIRE_BTN (Left Engine/AMAD Fire Warning/Extinguisher Light): 0=Left Engine, 1=AMAD Fire Warning, 2=Extinguisher Light
// LEFT_FIRE_BTN_COVER (Left Engine/AMAD Fire Warning Cover): 0=Left Engine, 1=AMAD Fire Warning Cover
// IR_COOL_SW (IR Cooling Switch): 0=ORIDE, 1=NORM, 2=OFF
// SPIN_RECOVERY_COVER (Spin Recovery Switch Cover): 0, 1
// SPIN_RECOVERY_SW (Spin Recovery Switch): 0, 1
// MASTER_ARM_SW (Master Arm Switch): 0, 1
// MASTER_MODE_AA (Master Mode Button): 0, 1
// MASTER_MODE_AG (Master Mode Button): 0, 1
// MASTER_CAUTION_RESET_SW (MASTER CAUTION Reset Button - Press to reset): 0, 1
// RIGHT_FIRE_BTN (Right Engine/AMAD Fire Warning/Extinguisher Light): 0=Right Engine, 1=AMAD Fire Warning, 2=Extinguisher Light
// RIGHT_FIRE_BTN_COVER (Right Engine/AMAD Fire Warning Cover): 0=Right Engine, 1=AMAD Fire Warning Cover
