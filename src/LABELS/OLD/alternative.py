import json
from pathlib import Path
import re

PROCESS_ALL_PANELS = False
json_file = 'FA-18C_hornet.json'
lua_file = 'FA-18C_hornet.lua'
header_output = 'DCSBIOSBridgeData.h'

target_objects = [
    'Fire Systems', 'Caution Light Panel', 'Dispenser/EMC Panel', 'LH Advisory Panel',
    'Left Engine Fire Warning Extinguisher Light', 'Lock Shoot Lights',
    'Map Gain/Spin Recovery Panel', 'Master Arm Panel', 'Master Caution Light',
    'RH Advisory Panel', 'Right Engine Fire Warning Extinguisher Light',
    'Interior Lights Panel', 'APU Fire Warning Extinguisher Light'
]

selector_value_map = {}
with open(lua_file, "r", encoding="utf-8", errors="ignore") as f:
    lua_content = f.read()
    pattern = re.compile(r'defineTumb\("([^"]+)",\s*\d+,\s*\d+,\s*\d+,\s*[\d.]+,\s*\{[^}]+\}.*?,\s*"[^"]+",\s*"([^"]+)"\)')
    for identifier, description in pattern.findall(lua_content):
        if "," in description:
            try:
                name_part, label_part = description.split(",", 1)
                labels = [v.strip() for v in label_part.split("/")]
                selector_value_map[identifier] = {
                    "name": name_part.strip(),
                    "labels": labels
                }
            except Exception:
                pass

led_entries = []
selector_entries = []
string_entries = []
selector_info_comments = []
led_wrappers = []
selector_wrappers = []

with open(json_file) as f:
    data = json.load(f)

    for panel, controls in data.items():
        if not PROCESS_ALL_PANELS and panel not in target_objects:
            continue
        for key, item in controls.items():
            ident = item.get('identifier', key)
            ctype = item.get('control_type', '').lower()
            outputs = item.get('outputs', [])
            if not outputs:
                continue
            out = outputs[0]
            if "address" not in out:
                continue
            address = out['address']
            desc = item.get('description', '').split(",")[0]

            if 'max_length' in out:
                string_entries.append((panel, ident, f'    {{ "{ident}", 0x{address:04X}, {out["max_length"]} }}'))
                continue

            if not all(k in out for k in ("mask", "shift_by")):
                continue

            mask = out['mask']
            shift = out['shift_by']

            if ctype == "selector":
                selector_wrappers.append(f'void cb_{ident}(unsigned int value) {{ onSelectorChange("{ident}", value); }}')
                selector_entries.append((panel, ident, f'    DcsBios::IntegerBuffer sel_{ident}(0x{address:04X}, 0x{mask:04X}, {shift}, cb_{ident});'))
            else:
                led_wrappers.append(f'void cb_{ident}(unsigned int value) {{ onLedChange("{ident}", value); }}')
                led_entries.append((panel, ident, f'    DcsBios::IntegerBuffer buf_{ident}(0x{address:04X}, 0x{mask:04X}, {shift}, cb_{ident});'))

            if ident in selector_value_map:
                name = selector_value_map[ident]["name"]
                labels = selector_value_map[ident]["labels"]
                label_str = ', '.join(f"{i}={label}" for i, label in enumerate(labels))
                selector_info_comments.append((panel, ident, f'// {ident} ({name}): {label_str}'))

known_ids = {ident for _, ident, _ in selector_info_comments}
for panel, ident, _ in selector_entries:
    if ident in known_ids:
        continue
    desc = ""
    for key, item in data.get(panel, {}).items():
        if item.get("identifier", key) == ident:
            desc = item.get("description", "").split(",")[0]
            break
    if '/' in desc:
        labels = [v.strip() for v in desc.split(',')[-1].split('/') if v.strip()]
        label_str = ', '.join(f"{i}={label}" for i, label in enumerate(labels[:4]))
    else:
        label_str = "0, 1"
    selector_info_comments.append((panel, ident, f'// {ident} ({desc}): {label_str}'))

led_entries.sort(key=lambda x: (x[0], x[1]))
selector_entries.sort(key=lambda x: (x[0], x[1]))
string_entries.sort(key=lambda x: (x[0], x[1]))
selector_info_comments.sort(key=lambda x: (x[0], x[1]))

with open(header_output, 'w', encoding='utf-8') as f:
    f.write('// Auto-generated by auto-generate-callback-wrappers.py\n\n')
    f.write('#pragma once\n\n')
    f.write('#include <Arduino>\n\n')

    f.write('// Shared stub declarations\n')
    f.write('void onLedChange(const char* label, unsigned int value);\n')
    f.write('void onSelectorChange(const char* label, unsigned int value);\n\n')

    f.write('// LED Callback Wrappers\n')
    for line in led_wrappers:
        f.write(line + '\n')
    f.write('\n')

    f.write('// Selector Callback Wrappers\n')
    for line in selector_wrappers:
        f.write(line + '\n')
    f.write('\n')

    f.write('// LED Buffers\n')
    for _, _, line in led_entries:
        f.write(line + '\n')
    f.write('\n')

    f.write('// Selector Buffers\n')
    for _, _, line in selector_entries:
        f.write(line + '\n')
    f.write('\n')

    f.write('struct DcsStringMapping {\n    const char* label;\n    uint16_t address;\n    uint16_t maxLength;\n};\n\n')

    f.write('const DcsStringMapping stringMap[] = {\n')
    for _, _, line in string_entries:
        f.write(line + ',\n')
    f.write('};\n')
    f.write('const size_t stringMapSize = sizeof(stringMap) / sizeof(stringMap[0]);\n\n')

    if selector_info_comments:
        f.write('/* ---- Enhanced Selector Info (from JSON + .lua) ---- */\n')
        for _, _, comment in selector_info_comments:
            f.write(comment + '\n')